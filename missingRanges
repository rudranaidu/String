Missing Ranges: Given a sorted integer array nums, where the range of elements are in the inclusive range [lower, upper],
return its missing ranges. 
For example, given nums = [0, 1, 3, 50, 75], lower = 0 and upper = 99, return ["2", "4->49", "51->74", "76->99"].

import java.util.ArrayList;
import java.util.List;

public class Main {
    public static List<String> getMissingRange(int[] a, int lower, int upper) {
        List<String> rangeList = new ArrayList<>();
        
        // Handle case when lower is within the array bounds
        if (a.length == 0 || lower < a[0]) {
            rangeList.add(findRange(lower, a.length == 0 ? upper : a[0] - 1));
        }
        
        for (int i = 0; i < a.length - 1; i++) {
            rangeList.add(findRange(a[i], a[i + 1]));
        }
        
        // Handle case when upper is within the array bounds
        if (a.length == 0 || upper > a[a.length - 1]) {
            rangeList.add(findRange(a.length == 0 ? lower : a[a.length - 1] + 1, upper));
        }
        
        return rangeList;
    }
  
    private static String findRange(int lower, int upper) {
        if (upper - lower == 1) {
            return String.valueOf(lower);
        } else {
            return lower + "->" + (upper - 1);
        }
    }

    public static void main(String[] args) {
        int[] nums = {0, 1, 3, 50, 75};
        int lower = 0;
        int upper = 99;

        List<String> missingRanges = getMissingRange(nums, lower, upper);
        System.out.println(missingRanges);
    }
}

Sample input and output for boundary cases:

Input: nums = [], lower = 0, upper = 99
Output: ["0->99"]

Input: nums = [5, 10, 15], lower = 0, upper = 99
Output: ["0->4"]

Input: nums = [5, 10, 15], lower = 0, upper = 20
Output: ["16->20"]

Input: nums = [5, 10, 15], lower = 7, upper = 12
Output: ["7->9", "11"]
