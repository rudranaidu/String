Problem 1) Can Attend the meeting
Given a list of meeting intervals where each interval consists of a start and an end time, check if a person can attend all the given meetings such that only one meeting can be attended at a time.

Example 1) {
"intervals": [
[1, 5],
[5, 8],
[10, 15]
]
}

3 meetings


Example 2) {
"intervals": [
[1, 5],
[4, 8]
]
}

1 meetings

BruteForce: O(nlogn)
 
import java.util.*;

class MeetingScheduler {
    public static void main(String[] args) {
        List<List<Integer>> intervals1 = new ArrayList<>();
        intervals1.add(Arrays.asList(1, 5));
        intervals1.add(Arrays.asList(5, 8));
        intervals1.add(Arrays.asList(10, 15));
        
        List<List<Integer>> intervals2 = new ArrayList<>();
        intervals2.add(Arrays.asList(1, 5));
        intervals2.add(Arrays.asList(4, 8));

        System.out.println("Meetings attended for intervals1: " + countMeetings(intervals1));
        System.out.println("Meetings attended for intervals2: " + countMeetings(intervals2));
    }
    
    public static int countMeetings(List<List<Integer>> intervals) {
        if (intervals == null || intervals.isEmpty()) return 0;
        
        // Sort the intervals based on start time
        Collections.sort(intervals, (a, b) -> a.get(0) - b.get(0));
        
        int meetingsAttended = 0;
        for (int i = 0; i < intervals.size() - 1; i++) {
            // Check if the end time of the current meeting is less than the start time of the next meeting
            if (intervals.get(i).get(1) < intervals.get(i + 1).get(0)) {
                meetingsAttended++;
            }
        }
        
        // Account for the last meeting
        meetingsAttended++;
        
        return meetingsAttended;
    }
}

Greedyapproach: O(n) 

     public static int countMeetings(List<List<Integer>> intervals) {
        if (intervals == null || intervals.isEmpty()) return 0;
        
        int meetingsAttended = 1; // At least one meeting can be attended
        int lastEndTime = intervals.get(0).get(1); // End time of the first meeting
        
        for (int i = 1; i < intervals.size(); i++) {
            int startTime = intervals.get(i).get(0);
            int endTime = intervals.get(i).get(1);
            
            if (startTime >= lastEndTime) {
                // Attend the meeting and update the end time
                meetingsAttended++;
                lastEndTime = endTime;
            }
        }
        return meetingsAttended;
    }

In Java, when you provide a custom comparator function like (a, b) -> a.get(0) - b.get(0) for sorting, 
the comparison logic works based on the result of the subtraction operation.


Problem 2) 
Merge Intervals: Given a collection of intervals, merge overlapping intervals.
Intervals: [[1,3],[2,6],[8,10],[15,18]]
Merged Intervals: [[1,6],[8,10],[15,18]]

private static List<List<Integer>> mergedIntervals(List<List<Integer>> intervals) {
    List<List<Integer>> mergedIntervals = new ArrayList<>();
    
    if (intervals == null || intervals.isEmpty()) {
        return Collections.emptyList();
    }
    
    Collections.sort(intervals, Comparator.comparingInt(a -> a.get(0)));
    
    int currentStartTime = intervals.get(0).get(0);
    int currentEndTime = intervals.get(0).get(1);
    
    for (int i = 1; i < intervals.size(); i++) {
        int nextIntervalStartTime = intervals.get(i).get(0);
        int nextIntervalEndTime = intervals.get(i).get(1);
        
        if (currentEndTime >= nextIntervalStartTime) {
            currentEndTime = Math.max(currentEndTime, nextIntervalEndTime);
        } else {
            mergedIntervals.add(Arrays.asList(currentStartTime, currentEndTime));
            currentStartTime = nextIntervalStartTime;
            currentEndTime = nextIntervalEndTime;
        }
    }
    
    mergedIntervals.add(Arrays.asList(currentStartTime, currentEndTime)); // Adding the last interval
    
    return mergedIntervals;
}

Problem 3) Conflicting Appointments: Given an array of intervals representing 'N' appointments, 
find out if a person can attend all the appointments.


private boolean canAttendMeeting(List<List<Integer>> intervals) {
    if (intervals == null || intervals.isEmpty()) {
        return false; // Return false for an empty list
    }
    
    Collections.sort(intervals, Comparator.comparingInt(a -> a.get(0)));
    
    int currentStartTime = intervals.get(0).get(0);
    int latestEndTime = intervals.get(0).get(1);
    
    for (int i = 1; i < intervals.size(); i++) {
        int nextIntervalStartTime = intervals.get(i).get(0);
        int nextIntervalEndTime = intervals.get(i).get(1);
        
        if (currentStartTime < nextIntervalEndTime) {
            return false; // Conflict found
        } else {
            currentStartTime = nextIntervalStartTime;
            latestEndTime = nextIntervalEndTime;
        }
    }
    
    return true; // No conflicts found
}



Problem 4) Employee Free Time Given a list of schedules representing the working hours of each employee, 
find the common free time among them.

import java.util.*;

class Interval {
    int start;
    int end;

    public Interval(int start, int end) {
        this.start = start;
        this.end = end;
    }
}

public class FreeTimeFinder {
    public static List<Interval> findCommonFreeTime(List<List<Interval>> employeeSchedules) {
        // Sort intervals for each employee by start time
        for (List<Interval> schedule : employeeSchedules) {
            Collections.sort(schedule, Comparator.comparingInt(interval -> interval.start));
        }

        // Find common free time
        List<Interval> commonFreeTime = new ArrayList<>();
        Interval prev = null;
        for (List<Interval> schedule : employeeSchedules) {
            for (Interval interval : schedule) {
                if (prev != null && prev.end < interval.start) { // Found a gap between intervals
                    commonFreeTime.add(new Interval(prev.end, interval.start));
                }
                prev = (prev == null || interval.end > prev.end) ? interval : prev;
            }
        }

        return commonFreeTime;
    }

    public static void main(String[] args) {
        List<List<Interval>> employeeSchedules = new ArrayList<>();
        employeeSchedules.add(Arrays.asList(new Interval(9, 12), new Interval(14, 17), new Interval(20, 22)));
        employeeSchedules.add(Arrays.asList(new Interval(8, 11), new Interval(13, 15), new Interval(18, 21)));
        employeeSchedules.add(Arrays.asList(new Interval(10, 13), new Interval(16, 19), new Interval(23, 24)));

        List<Interval> commonFreeTime = findCommonFreeTime(employeeSchedules);

        System.out.println("Common Free Time:");
        for (Interval interval : commonFreeTime) {
            System.out.println("[" + interval.start + ", " + interval.end + "]");
        }
    }
}


Problem 5:
  Given an array of meeting time intervals consisting of start and end times, find the minimum number of conference rooms required.

private int countMeetingRooms(List<List<Integer>> intervals) {
    if (intervals == null || intervals.isEmpty()) {
        return 0;
    }
    int count = 1; // At least one conference room is needed for the first meeting
    Collections.sort(intervals, Comparator.comparingInt(a -> a.get(0)));
    int lastEndTime = intervals.get(0).get(1);
    
    for (int i = 1; i < intervals.size(); i++) {
        int nextIntervalStartTime = intervals.get(i).get(0);
        int nextIntervalEndTime = intervals.get(i).get(1);
        
        if (nextIntervalStartTime < lastEndTime) {
            count++; // Need a new conference room
        } else {
            lastEndTime = nextIntervalEndTime; // Update lastEndTime
        }
    }
    
    return count;
}


Problem 6: Insert Interval: Given a set of non-overlapping intervals and a new interval, insert the new interval 
into the intervals (merge if necessary).


import java.util.*;

public class IntervalInsertion {
    public static List<List<Integer>> insertInterval(List<List<Integer>> intervals, List<Integer> newInterval) {
        if (intervals == null || intervals.isEmpty()) {
            return Collections.singletonList(newInterval);
        }

        Collections.sort(intervals, Comparator.comparingInt(a -> a.get(0)));
        List<List<Integer>> resultIntervals = new ArrayList<>();
        int i = 0;
        int n = intervals.size();
        
        // Add all intervals that end before the new interval starts
        while (i < n && intervals.get(i).get(1) < newInterval.get(0)) {
            resultIntervals.add(intervals.get(i));
            i++;
        }

        // Merge overlapping intervals using take minimum of start time and maximum of end time
        while (i < n && intervals.get(i).get(0) <= newInterval.get(1)) {
            newInterval.set(0, Math.min(newInterval.get(0), intervals.get(i).get(0)));
            newInterval.set(1, Math.max(newInterval.get(1), intervals.get(i).get(1)));
            i++;
        }
        resultIntervals.add(newInterval);

        // Add remaining intervals
        while (i < n) {
            resultIntervals.add(intervals.get(i));
            i++;
        }

        return resultIntervals;
    }

    public static void main(String[] args) {
        List<List<Integer>> intervals = Arrays.asList(Arrays.asList(1, 3), Arrays.asList(6, 9));
        List<Integer> newInterval = Arrays.asList(2, 5);
        List<List<Integer>> mergedIntervals = insertInterval(intervals, newInterval);
        System.out.println("Merged Intervals: " + mergedIntervals);
    }
}

Problem 6: Interval List Intersections: Given two lists of closed intervals, each list of intervals is pairwise disjoint and in sorted order, 
return the intersection of these two interval lists.
Input:
List 1: [[0,2],[5,10],[13,23],[24,25]]
List 2: [[1,5],[8,12],[15,24],[25,26]]

Output:
Intersection of Interval Lists: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]

Explanation:

The intervals [0,2] and [1,5] intersect at [1,2].
The intervals [5,10] and [1,5] intersect at [5,5].
The intervals [5,10] and [8,12] intersect at [8,10].
The intervals [13,23] and [15,24] intersect at [15,23].
The intervals [24,25] and [15,24] intersect at [24,24].
The intervals [24,25] and [25,26] intersect at [25,25].
So, the intersection of these two interval lists is [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]].


import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class IntervalIntersection {
    public static List<List<Integer>> intervalIntersection(int[][] firstList, int[][] secondList) {
        List<List<Integer>> intersections = new ArrayList<>();

        int i = 0, j = 0;
        while (i < firstList.length && j < secondList.length) {
		
		      // take max of start time in list1 & list2 and min of end time in list1& list2
            int start = Math.max(firstList[i][0], secondList[j][0]);
            int end = Math.min(firstList[i][1], secondList[j][1]);

            if (start <= end) {
                intersections.add(Arrays.asList(start, end));
            }

            if (firstList[i][1] < secondList[j][1]) {
                i++;
            } else {
                j++;
            }
        }

        return intersections;
    }

    public static void main(String[] args) {
        int[][] firstList = {{0, 2}, {5, 10}, {13, 23}, {24, 25}};
        int[][] secondList = {{1, 5}, {8, 12}, {15, 24}, {25, 26}};

        List<List<Integer>> intersection = intervalIntersection(firstList, secondList);
        System.out.println("Intersection of Interval Lists: " + intersection);
    }
}

Problem 7: Minimum Number of Arrows to Burst Balloons: Given a 2D array of points where each point represents 
the start and end coordinates of a balloon, find the minimum number of arrows that must be shot to burst all balloons.

It is similar to finding overlapping intervals.
private static int countNumberOfArrows(int[][] balloons) {
    int arrows = 0;
    int lastBalloonEndPoint = balloons[0][1]; // Corrected variable name
    for (int i = 1; i < balloons.length; i++) {
        int nextBalloonStartPoint = balloons[i][0];
        if (lastBalloonEndPoint < nextBalloonStartPoint) {
            arrows++;
        } else {
            lastBalloonEndPoint = Math.max(lastBalloonEndPoint, balloons[i][1]); // Added missing semicolon
        }
    }
    return arrows;
}
