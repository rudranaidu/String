Problem 1) Can Attend the meeting

Given a list of meeting intervals where each interval consists of a start and an end time, check if a person can attend all the given meetings such that only one meeting can be attended at a time.

Example 1) {
"intervals": [
[1, 5],
[5, 8],
[10, 15]
]
}

3 meetings


Example 2) {
"intervals": [
[1, 5],
[4, 8]
]
}

1 meetings

BruteForce: O(nlogn)
 
import java.util.*;

class MeetingScheduler {
    public static void main(String[] args) {
        List<List<Integer>> intervals1 = new ArrayList<>();
        intervals1.add(Arrays.asList(1, 5));
        intervals1.add(Arrays.asList(5, 8));
        intervals1.add(Arrays.asList(10, 15));
        
        List<List<Integer>> intervals2 = new ArrayList<>();
        intervals2.add(Arrays.asList(1, 5));
        intervals2.add(Arrays.asList(4, 8));

        System.out.println("Meetings attended for intervals1: " + countMeetings(intervals1));
        System.out.println("Meetings attended for intervals2: " + countMeetings(intervals2));
    }
    
    public static int countMeetings(List<List<Integer>> intervals) {
        if (intervals == null || intervals.isEmpty()) return 0;
        
        // Sort the intervals based on start time
        Collections.sort(intervals, (a, b) -> a.get(0) - b.get(0));
        
        int meetingsAttended = 0;
        for (int i = 0; i < intervals.size() - 1; i++) {
            // Check if the end time of the current meeting is less than the start time of the next meeting
            if (intervals.get(i).get(1) < intervals.get(i + 1).get(0)) {
                meetingsAttended++;
            }
        }
        
        // Account for the last meeting
        meetingsAttended++;
        
        return meetingsAttended;
    }
}

Greedyapproach: O(n) 

     public static int countMeetings(List<List<Integer>> intervals) {
        if (intervals == null || intervals.isEmpty()) return 0;
        
        int meetingsAttended = 1; // At least one meeting can be attended
        int lastEndTime = intervals.get(0).get(1); // End time of the first meeting
        
        for (int i = 1; i < intervals.size(); i++) {
            int startTime = intervals.get(i).get(0);
            int endTime = intervals.get(i).get(1);
            
            if (startTime >= lastEndTime) {
                // Attend the meeting and update the end time
                meetingsAttended++;
                lastEndTime = endTime;
            }
        }
        return meetingsAttended;
    }

In Java, when you provide a custom comparator function like (a, b) -> a.get(0) - b.get(0) for sorting, 
the comparison logic works based on the result of the subtraction operation.


Problem 2) Conflicting Appointments: Given an array of intervals representing 'N' appointments, 
find out if a person can attend all the appointments.



